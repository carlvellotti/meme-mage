You are an expert in TypeScript, Next.js App Router, React, and Tailwind. Follow @Next.js 14 App Router docs for Data Fetching, Rendering, and Routing. Use Vercel AI SDK for handling AI interactions and streaming responses.

- All project files are saved in the /src folder. 
  - src/app has the page.tsx and layout.tsx files
  - src/app/api has the API routes
  - src/app/components has all the React components
  - src/app/lib has all the other code like helpers, hooks, and contexts

There are some pre-configured APIs in this template that can be used but only if required by the current project. These have already been created:

- Supabase
  - src/lib/supabase has client.ts, server.ts, admin.ts, and types.ts for database operations
  - Used for meme template storage and vector search functionality
  - Handles all data persistence needs including user data and template management

- OpenAI 
  - src/app/api/openai has chat/route.ts which is a simple API calling streamText from OpenAI using the Vercel AI library
  - Also used for generating embeddings for template search

- Anthropic
  - src/app/api/anthropic has chat/route.ts which is a simple API calling streamText from Anthropic using the Vercel AI library

- Replicate
  - src/app/api/replicate has generate-image/route.ts which is a simple API calling the Stable Diffusion model hosted on Replicate to generate images

- Deepgram
  - src/app/api/deepgram has transcribe-audio/route.ts which is a simple API that returns the Deepgram API key to be used in the client side to transcribe audio in real-time
  - src/lib/contexts has a DeepgramContext.tsx file that has the Deepgram API key set up with the useDeepgram hook to be used in any component

# Project Overview: Full-Stack AI Template

## Project Architecture
This is a Next.js 14 application with multiple AI integrations, designed as a template for building AI-powered applications.

### Core Technologies
- Next.js 14 App Router
- TypeScript
- TailwindCSS
- Vercel AI SDK
- Multiple AI Providers (OpenAI, Anthropic, Replicate)
- Supabase (for data persistence, template storage and vector search)
- Deepgram (for voice transcription)

### Directory Structure
- `/src`
  - `/app` - Next.js app router pages and API routes
    - `/api` - API endpoints for AI services
    - `/components` - React components
  - `/lib` - Utility functions, hooks, and contexts
    - `/contexts` - React contexts (Deepgram)
    - `/supabase` - Supabase client and types
    - `/utils` - Helper functions

## Current Features

### 1. Meme Mage
- AI-powered template selection
- Caption generation
- Video processing with canvas
- Template management system

## Development Guidelines

### 1. API Routes
- Place in `/src/app/api`
- Use proper error handling and typing
- Implement rate limiting where appropriate
- Return consistent response formats

### 2. Components
- Keep components focused and modular
- Use TypeScript interfaces for props
- Implement proper loading states
- Handle errors gracefully
- Use Tailwind for styling

### 3. State Management
- Use React Context for global state
- Implement proper TypeScript types
- Handle loading and error states
- Use local storage for persistence where appropriate

### 4. AI Integration
- Use Vercel AI SDK for streaming responses
- Implement proper error handling
- Handle rate limits and API failures
- Cache responses where appropriate

### 5. Database Operations
- Use Supabase for all data persistence
- Implement proper error handling
- Use TypeScript types for data models
- Utilize vector embeddings for template search

## Testing Guidelines
- Implement unit tests for utilities
- Add integration tests for API routes
- Test error handling
- Verify AI integration functionality

## Current Focus Areas
1. Improving meme generator functionality
2. Enhancing AI template selection
3. Optimizing video processing
4. Adding user authentication
5. Implementing proper error handling

## Known Issues
1. Video processing performance needs optimization
2. Template selection accuracy needs improvement
3. Error handling needs standardization
4. Loading states need refinement

## Future Enhancements
1. Add user authentication
2. Implement template sharing
3. Add more AI models
4. Improve performance optimization
5. Add comprehensive testing

Remember to:
- Follow TypeScript best practices
- Implement proper error handling
- Use consistent code formatting
- Document new features and changes
- Test thoroughly before deployment

// --- Auth & Personas Feature Overview (Added July 2024) ---

// **Goal:** Implement user accounts, allow users to define audience personas, 
// provide feedback on meme templates per persona, and filter template 
// suggestions based on this feedback.

// **Core Components & Flow:**

// 1. **Authentication:**
//    - Handled by Supabase Auth (`@supabase/auth-helpers-nextjs`, `@supabase/auth-ui-react`).
//    - Login/Signup UI: `src/app/auth/page.tsx`.
//    - Middleware (`src/middleware.ts`) manages sessions.
//    - Client/Server/Route/Middleware Supabase client helpers in `src/lib/supabase/`.
//    - User context provided by `src/app/components/SupabaseProvider.tsx`.
//    - API routes are protected; user ID is extracted from the session.

// 2. **Personas:**
//    - Data Model: `personas` table in Supabase (stores `user_id`, `name`, `description`). Unique constraint on `(user_id, name)`.
//    - Management UI: `src/app/components/PersonaManager.tsx` (modal component using SWR for data fetching/mutation).
//    - APIs: 
//      - `src/app/api/personas/route.ts` (GET list, POST create)
//      - `src/app/api/personas/[id]/route.ts` (PUT update, DELETE)
//    - Integration: `src/app/components/MemeSelectorV2.tsx` uses SWR to fetch personas, displays a dropdown, and allows opening the `PersonaManager` modal.

// 3. **Meme Feedback:**
//    - Data Model: `meme_feedback` table (stores `user_id`, `persona_id`, `template_id`, `status` ENUM('used', 'dont_use')). Unique constraint on `(user_id, persona_id, template_id)`.
//    - API: `src/app/api/feedback/route.ts` (POST for upserting feedback).
//    - Integration: 
//      - Feedback buttons appear in `src/app/components/MemeGenerator.tsx` after a template is selected.
//      - Feedback buttons also appear on the template options cards in `src/app/components/MemeSelectorV2.tsx`.
//      - Both components call the `/api/feedback` endpoint when buttons are clicked, passing the relevant IDs and status.

// 4. **Template Selection & Filtering:**
//    - Main Component: `src/app/components/MemeSelectorV2.tsx`.
//    - User selects a Persona, optionally enters a prompt, and can toggle "Greenscreen Mode".
//    - API Call: `handleSubmit` calls `POST /api/templates/select/route.ts`, sending `persona_id`, `prompt` (optional), and `isGreenscreenMode` (boolean).
//    - Backend Logic (`/api/templates/select`):
//      - Authenticates the user.
//      - Based on whether a `prompt` exists, calls one of two Supabase RPC functions:
//        - `match_meme_templates(embedding, threshold, count, userId, personaId, filterGreenscreen)`: If prompt exists (performs vector search).
//        - `get_random_meme_templates(count, userId, personaId, filterGreenscreen)`: If no prompt exists.
//    - RPC Function Logic (Defined via Migrations):
//      - Both functions accept `user_id_param`, `persona_id_param`, and `filter_greenscreen`.
//      - They perform a `LEFT JOIN` from `meme_templates` to `meme_feedback` ON the relevant IDs (`template_id`, `user_id`, `persona_id`).
//      - They filter results using `WHERE meme_feedback.id IS NULL` (to exclude templates with feedback for that user/persona).
//      - They also filter using `WHERE (filter_greenscreen IS NULL OR meme_templates.is_greenscreen = filter_greenscreen)`.
//      - Returns the filtered list of templates.
//    - Result Handling: Templates are returned to `MemeSelectorV2` for caption generation and display.

// --- Custom Caption Rules Feature Overview (Added April 2024) ---

// **Goal:** Allow users to create, save, select, view, and use custom sets of "Key Rules" for meme caption generation, replacing the default rules.

// **Core Components & Flow:**

// 1. **Data Model:** 
//    - `caption_generation_rules` table in Supabase (stores `user_id`, `name`, `rules_text`). Unique constraint on `(user_id, name)`.

// 2. **APIs:**
//    - `src/app/api/caption-rules/route.ts` (GET list, POST create).
//    - `src/app/api/caption-rules/[id]/route.ts` (PUT update, DELETE).
//    - Both routes protected, require authentication, use Zod for validation.

// 3. **Management UI:**
//    - `src/app/components/CaptionRuleManager.tsx`: Modal component using SWR.
//    - Allows viewing default rules (read-only).
//    - Allows CRUD operations on user's custom rule sets.
//    - Uses inline editing pattern (consistent with `PersonaManager`).

// 4. **Integration & Prompt Construction:**
//    - `src/app/components/MemeSelectorV2.tsx`:
//      - Uses SWR to fetch custom rule sets.
//      - Displays a dropdown for selecting "Default Rules" or a custom set.
//      - Persists the last selection using `localStorage`.
//      - Opens `CaptionRuleManager` modal.
//      - In `generateCaptionsForAllTemplates`, retrieves the selected rule set's text.
//    - `src/lib/utils/prompts.ts`:
//      - `getDefaultCaptionRules()` helper function returns the default rules text.
//      - `getCaptionGenerationTestPrompt()` modified to accept optional `rulesText`.
//      - Constructs the final system prompt, injecting either the custom `rulesText` or the default rules into the "Key rules for captions" section.
//      - The dynamically constructed prompt is sent to `/api/ai/chat` for caption generation.

// **Key Dependencies:**
// - `@supabase/auth-helpers-nextjs`
// - `@supabase/auth-ui-react`
// - `@supabase/auth-ui-shared`
// - `@supabase/supabase-js`
// - `swr` (for client-side data fetching - personas)
// - `zod` (for API input validation)
// - `react-hot-toast` (for user feedback)